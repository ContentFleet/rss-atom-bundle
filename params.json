{"name":"rss-atom-bundle","tagline":"RSS and Atom Bundle for Symfony 2","body":"RssAtomBundle - Read and Build Atom/RSS feeds\r\n=============================================\r\n\r\nRssAtomBundle is a Bundle for Symfony 2 made to easily access and deliver RSS / Atom feeds. It features:\r\n\r\n- Detection of the feed format (RSS / Atom)\r\n- A generic StreamController built to write all your feeds. This controller is able to send a 304 HTTP Code if the feed didn't change since the last visit\r\n- HTTP Headers support when reading feeds in order to save network traffic\r\n- Content filtering to fetch only the newest items\r\n- multiple feeds writing\r\n- Ability to use doctrine as a data source\r\n\r\nAll classes are heavily tested using PHPUnit.\r\n\r\nInstallation\r\n============\r\n\r\nDependencies\r\n------------\r\n\r\nAs a Symfony 2 Bundle, RssAtomBundle must be installed using Composer. If you do not know Composer, please refer to its website: http://getcomposer.org/\r\n\r\nInstallation in a Symfony 2 project\r\n-----------------------------------\r\n\r\nThis is the most common way if you want to add RssAtomBundle into an existing project.\r\nEdit composer.json and add the following line in the \"require\" section:\r\n\r\n    \"debril/rss-atom-bundle\": \"~1.1\"\r\n\r\nthen, ask Composer to install it:\r\n\r\n    composer.phar update debril/rss-atom-bundle\r\n\r\nCompatibility between 1.1.6 and 1.2.0\r\n-----------------------------\r\n\r\nIf you are already using rss-atom-bundle, beware that the 1.2.0 version breaks some backward compatibility. If you do not need the improvements provided by the 1.2.0 version, please edit composer.json as below :\r\n\r\n    \"debril/rss-atom-bundle\": \"~1.1, <1.2\"\r\n\r\nThe migration process is described in the [migrations section](https://github.com/alexdebril/rss-atom-bundle/wiki/Migrations)\r\n\r\nFetching the repository\r\n-----------------------\r\n\r\nDo this if you want to contribute (and you're welcome to do so):\r\n\r\n    git clone https://github.com/alexdebril/rss-atom-bundle.git\r\n\r\n    composer.phar install --dev\r\n\r\nUnit Testing\r\n============\r\n\r\nYou can run the unit test suites using the following command in the Bundle's source director:\r\n\r\n    bin/phpunit\r\n\r\nUsage\r\n=====\r\n\r\nrss-atom-bundle is designed to read feeds across the internet and to publish your own. It provides two sets of interfaces, each one being dedicated to feed's consuming or publishing :\r\n\r\n- [FeedIn](https://github.com/alexdebril/rss-atom-bundle/blob/master/Protocol/FeedIn.php) & [ItemIn](https://github.com/alexdebril/rss-atom-bundle/blob/master/Protocol/ItemIn.php) are used for feed reading.\r\n- [FeedOut](https://github.com/alexdebril/rss-atom-bundle/blob/master/Protocol/FeedOut.php) & [ItemOut](https://github.com/alexdebril/rss-atom-bundle/blob/master/Protocol/ItemOut.php) are used for feed publishing.\r\n\r\nFeed Reading\r\n------------\r\n\r\nTo read a feed you need to use the `debril.reader` service which provides two methods for that : `getFeedContent()` and `readFeed()`. This service is based upon the [FeedReader](https://github.com/alexdebril/rss-atom-bundle/blob/master/Protocol/FeedReader.php) class.\r\n\r\n## using getFeedContent()\r\n`getFeedContent()` is designed to give a brand new FeedContent instance or any object of your own, as long as it implements the [FeedIn](https://github.com/alexdebril/rss-atom-bundle/blob/dev-master/Protocol/FeedIn.php) interface. It takes two arguments :\r\n\r\n- `$url` : URL of the RSS/Atom feed you want to read (eg: http://php.net/feed.atom)\r\n- `$date` : the last time you read this feed. This is useful to fetch only the articles which were published after your last hit.\r\n\r\nWherever you have access to the service container :\r\n```php\r\n<?php\r\n    // fetch the FeedReader\r\n    $reader = $this->container->get('debril.reader');\r\n\r\n    // this date is used to fetch only the latest items\r\n    $date = new \\DateTime($unmodifiedSince);\r\n\r\n    // the feed you want to read\r\n    $url = 'http://host.tld/feed';\r\n\r\n    // now fetch its (fresh) content\r\n    $feed = $reader->getFeedContent($url, $date);\r\n\r\n    // the $content object contains as many Item instances as you have fresh articles in the feed\r\n    $items = $feed->getItems();\r\n?>\r\n```\r\n`getFeedContent()` fetches the feed hosted at `$url` and removes items prior to `$date`. If it is the first time you read this feed, then you must specify a date far enough in the past to keep all the items. This method does not loop until the `$date` is reached, it justs performs one hit and filters the response to keep only the fresh articles.\r\n\r\nIf you need more information, please visit the [Reading Feeds](https://github.com/alexdebril/rss-atom-bundle/wiki/Reading-feeds) section on the wiki\r\n\r\nProviding feeds\r\n----------------\r\nRssAtomBundle offers the ability to provide RSS/Atom feeds. The route will match the following pattern : /{format}/{contentId}\r\n\r\n- {format} must be \"rss\" or \"atom\" (or whatever you want if you add the good routing rule in routing.yml)\r\n- {contentId} is an optional argument. Use it you have several feeds\r\n\r\nThe request will be handled by `StreamController`, according to the following steps :\r\n\r\n- 1 : grabs the ModifiedSince header if it exists\r\n- 2 : creates an `Options` instance holding the request's parameters (contentId if it exists)\r\n- 3 : gets the provider defined in services.xml and calls the `getFeedContent(Options $options)` method\r\n- 4 : compare the feed's LastModified property with the ModifiedSince header\r\n- 5 : if LastModified is prior or equal to ModifiedSince then the response contains only a \"NotModified\" header and the 304 code. Otherwise, the stream is built and sent to the client\r\n\r\nStreamController expects the getFeedContent()'s return value to be a FeedOut instance. It can be a Debril\\RssAtomBundle\\Protocol\\Parser\\FeedContent or a class you wrote and if so, your class MUST implement the FeedOut interface.\r\n\r\n```php\r\n<?php\r\ninterface FeedOut\r\n{\r\n\r\n    /**\r\n     * Atom : feed.updated <feed><updated>\r\n     * Rss  : rss.channel.lastBuildDate <rss><channel><lastBuildDate>\r\n     * @return \\DateTime\r\n     */\r\n    public function getLastModified();\r\n\r\n    /**\r\n     * Atom : feed.title <feed><title>\r\n     * Rss  : rss.channel.title <rss><channel><title>\r\n     * @return string\r\n     */\r\n    public function getTitle();\r\n\r\n    // Full source can be read in the repository .......\r\n?>\r\n```\r\n\r\nNow, how to plug the `StreamController` with the provider of your choice ? The easiest way is to override the `debril.provider.default` service with your own in services.xml :\r\n\r\n```xml\r\n<service id=\"debril.provider.default\" class=\"Namespace\\Of\\Your\\Class\">\r\n    <argument type=\"service\" id=\"doctrine\" />\r\n</service>\r\n```\r\n\r\nYour class just needs to implement the `FeedContentProvider` interface :\r\n\r\n```php\r\ninterface FeedContentProvider\r\n{\r\n    /**\r\n     * @param \\Symfony\\Component\\OptionsResolver $params\r\n     * @return \\Debril\\RssAtomBundle\\Protocol\\FeedOut\r\n     * @throws \\Debril\\RssAtomBundle\\Protocol\\FeedNotFoundException\r\n     */\r\n    public function getFeedContent(Options $options);\r\n}\r\n```\r\n\r\nIf the reclaimed feed does not exist, you just need to throw a FeedNotFoundException to make the StreamController answer with a 404 error. Otherwise, `getFeedContent(Options $options)` must return a `FeedContent` instance, which will return an array of `Item` objects through `getItems()`. Then, the controller uses a `FeedFormatter` object to properly turn your `FeedContent` object into a XML stream.\r\n\r\nMore information on the FeedContentProvider interface and how to interface rss-atom-bundle directly with doctrine can be found in the [Providing Feeds section](https://github.com/alexdebril/rss-atom-bundle/wiki/Providing-feeds)\r\n\r\nUseful Tips\r\n===========\r\n\r\nSkipping 304 HTTP Code\r\n----------------------\r\n\r\nThe HTTP cache handling can be annoying during development process, you can skip it through configuration in your app/config/parameters.yml file :\r\n\r\n```yml\r\nparameters:\r\n    force_refresh:     true\r\n```\r\n\r\nThis way, the `StreamController` will always display your feed's content and return a 200 HTTP code.\r\n\r\nChoosing your own provider\r\n--------------------------\r\n\r\nNeed to keep the existing routes and add one mapped to a different FeedProvider ? add it own in your routing file :\r\n\r\n```xml\r\n    <route id=\"your_route_name\" pattern=\"/your/route/{contentId}\">\r\n        <default key=\"_controller\">DebrilRssAtomBundle:Stream:index</default>\r\n        <default key=\"format\">rss</default>\r\n        <default key=\"source\">your.provider.service</default>\r\n    </route>\r\n```\r\n\r\nThe `source` parameter must contain a valid service name defined in your application.\r\n\r\nContributors\r\n------------\r\n\r\n* Alex Debril\r\n* Elnur Abdurrakhimov https://github.com/elnur\r\n* matdev https://github.com/matdev\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}